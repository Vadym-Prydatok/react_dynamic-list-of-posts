{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","utils/api.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","hasSidebar","setSidebar","selectPost","setSelectPost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getPosts","userId","getComments","postId","deleteComment","commentId","NewCommentForm","updateComments","setLoadingErrorNotice","useState","name","setName","email","setEmail","comment","setComment","hasEmptyName","setEmptyName","hasEmptyEmail","setEmptyEmail","hasEmptyCommentBody","setEmptyCommentBody","isLoading","setLoading","handleSubmit","event","a","preventDefault","createComment","trim","comments","onSubmit","htmlFor","placeholder","value","onChange","newName","target","newEmail","newComment","PostDetails","commentsFromServer","setComments","hasOpenForm","setOpenForm","loadingErrorNotice","hasLoadingError","loadComments","handleDeleteComment","immediatelyDelete","filter","useEffect","length","href","UserSelector","users","loadingPosts","isOpen","setOpenList","currentUser","setUser","onBlur","role","user","onMouseDown","App","usersFromServer","setUsers","postsFromServer","setPosts","isLoadingError","setLoadingError","loadingUsers","useCallback","showPostDetails","selectedPost","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66062d2e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  hasSidebar: boolean,\n  setSidebar: (state: boolean) => void,\n  selectPost: number,\n  setSelectPost: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  hasSidebar,\n  setSidebar,\n  selectPost,\n  setSelectPost,\n}) => {\n  const toogleSideBar = (id: number) => {\n    if (id === selectPost) {\n      setSelectPost(0);\n      setSidebar(!hasSidebar);\n    } else {\n      setSidebar(true);\n      setSelectPost(id);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table\n        className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': post.id !== selectPost || !hasSidebar },\n                  )}\n                  onClick={() => toogleSideBar(post.id)}\n                >\n                  {selectPost === post.id && hasSidebar ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data?: Comment,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Comment) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Comment) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users/');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: Comment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment, getComments } from '../utils/api';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number,\n  updateComments: (postId: Comment[] | null) => void,\n  setLoadingErrorNotice: (error: string) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  updateComments,\n  setLoadingErrorNotice,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [hasEmptyName, setEmptyName] = useState(false);\n  const [hasEmptyEmail, setEmptyEmail] = useState(false);\n  const [hasEmptyCommentBody, setEmptyCommentBody] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoadingErrorNotice('');\n\n    const createComment = {\n      id: 0,\n      postId,\n      name,\n      email,\n      body: comment,\n    };\n\n    switch (true) {\n      case !name.trim():\n        setEmptyName(true);\n\n        return;\n\n      case !email.trim():\n        setEmptyEmail(true);\n\n        return;\n\n      case !comment.trim():\n        setEmptyCommentBody(true);\n\n        return;\n\n      default:\n        break;\n    }\n\n    try {\n      setLoading(true);\n      await addComment(createComment);\n      const comments = await getComments(postId);\n\n      updateComments(comments);\n\n      setComment('');\n    } catch (error) {\n      setLoadingErrorNotice('Unable to add comment, please try again');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChangeName = (newName: string) => {\n    setName(newName);\n    setEmptyName(false);\n  };\n\n  const handleChangeEmail = (newEmail: string) => {\n    setEmail(newEmail);\n    setEmptyEmail(false);\n  };\n\n  const handleChangeComment = (newComment: string) => {\n    setComment(newComment);\n    setEmptyCommentBody(false);\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setEmptyName(false);\n    setEmptyEmail(false);\n    setEmptyCommentBody(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasEmptyName },\n            )}\n            value={name}\n            onChange={({ target }) => handleChangeName(target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasEmptyName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmptyName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasEmptyEmail },\n            )}\n            onChange={({ target }) => handleChangeEmail(target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmptyEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmptyEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={comment}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': hasEmptyCommentBody },\n            )}\n            onChange={({ target }) => handleChangeComment(target.value)}\n          />\n        </div>\n\n        {hasEmptyCommentBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getComments } from '../utils/api';\n\ninterface Props {\n  post: Post,\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(({ post }) => {\n  const [commentsFromServer, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setLoading] = useState(false);\n  const [hasOpenForm, setOpenForm] = useState(false);\n  const [loadingErrorNotice, setLoadingErrorNotice] = useState('');\n  const hasLoadingError = !!loadingErrorNotice;\n\n  const loadComments = async (postId: number) => {\n    setLoadingErrorNotice('');\n    try {\n      setLoading(true);\n      setOpenForm(false);\n      const comments = await getComments(postId);\n\n      setComments(comments);\n    } catch (error) {\n      setLoadingErrorNotice('Something went wrong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    setLoadingErrorNotice('');\n    if (commentsFromServer) {\n      const immediatelyDelete = commentsFromServer.filter(comment => (\n        comment.id !== commentId));\n\n      setComments(immediatelyDelete);\n    }\n\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setLoadingErrorNotice('Unable to delete comment, please try again');\n      setComments(commentsFromServer);\n    }\n  };\n\n  useEffect(() => {\n    loadComments(post.id);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n        {isLoading ? <Loader />\n          : (\n            <div className=\"block\">\n\n              {hasLoadingError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  {loadingErrorNotice}\n                </div>\n              )}\n\n              {commentsFromServer?.length === 0\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )\n                : <p className=\"title is-4\">Comments:</p>}\n              {commentsFromServer?.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                    {/* {'Multi\\nline\\ncomment'} */}\n                  </div>\n                </article>\n              ))}\n\n              {!hasOpenForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setOpenForm(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          )}\n\n        {hasOpenForm && (\n          <NewCommentForm\n            postId={post.id}\n            updateComments={setComments}\n            setLoadingErrorNotice={setLoadingErrorNotice}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  loadingPosts: (userId: number) => void,\n}\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  loadingPosts,\n}) => {\n  const [isOpen, setOpenList] = useState(false);\n  const [currentUser, setUser] = useState('');\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onBlur={() => setOpenList(false)}\n          onClick={() => setOpenList(!isOpen)}\n        >\n          <span>{!currentUser ? 'Choose a user' : `${currentUser}`}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onMouseDown={() => {\n                  loadingPosts(user.id);\n                  setOpenList(false);\n                  setUser(user.name);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts, getUsers } from './utils/api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [usersFromServer, setUsers] = useState<User[]>([]);\n  const [postsFromServer, setPosts] = useState<Post[] | null>(null);\n  const [isLoadingError, setLoadingError] = useState(false);\n  const [hasSidebar, setSidebar] = useState(false);\n  const [selectPost, setSelectPost] = useState(0);\n\n  const loadingUsers = useCallback(async () => {\n    try {\n      setLoading(true);\n      const users = await getUsers();\n\n      setUsers(users);\n    } catch (error) {\n      setLoadingError(true);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const loadingPosts = useCallback(async (userId: number) => {\n    try {\n      setLoading(true);\n      const posts = await getPosts(userId);\n\n      setPosts(posts);\n    } catch (error) {\n      setLoadingError(true);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const showPostDetails = useCallback((id: number) => {\n    const selectedPost = postsFromServer?.find(post => post.id === id);\n\n    if (selectedPost) {\n      return selectedPost;\n    }\n\n    return null;\n  }, [postsFromServer]);\n\n  useEffect(() => {\n    loadingUsers();\n  }, []);\n\n  const selectedPost = showPostDetails(selectPost);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={usersFromServer}\n                  loadingPosts={loadingPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!postsFromServer\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {isLoading && <Loader />}\n\n                {isLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {postsFromServer?.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {postsFromServer && postsFromServer.length !== 0\n                  && (\n                    <PostsList\n                      posts={postsFromServer}\n                      hasSidebar={hasSidebar}\n                      setSidebar={setSidebar}\n                      selectPost={selectPost}\n                      setSelectPost={setSelectPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': hasSidebar },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}